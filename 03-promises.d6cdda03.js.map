{"mappings":"AAAeA,SAASC,cAAc,SAE5BC,MAAQ,IAFlB,MACMC,EAEGC,KAAO,IAFVD,EAGKE,OAAS,EAEdC,EAAe,GAErB,SAASC,EAAcC,EAAUN,GAC/BO,YAAW,KACT,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,QAAQC,IAAIJ,GACZG,QAAQC,IAAIN,GAEI,IAAIO,SAAQ,CAACC,EAASC,KAKlCD,EAAQd,EAAOM,EAIS,IAGpBU,MACNC,IACEN,QAAQC,IAAIK,GACZb,EAAaE,EAAW,GAAGA,SAAWW,EACtCb,EAAaE,EAAW,GAAGN,MAAQiB,EAEjCN,QAAMC,IAAIR,EAAa,IAE3Bc,IACEP,QAAQC,IAAIM,GAEZd,EAAaE,EAAW,GAAGA,SAAWY,EACtCd,EAAaE,EAAW,GAAGN,MAAQkB,EACnCP,QAAQC,IAAIR,EAAa,GAE5B,GACAJ,E,CAGL,IAAK,IAAImB,EAAI,EAAGA,EAAIlB,EAAkB,EAAGkB,GAAK,EAC5Cf,EAAagB,KAAK,IAClBf,EAAcc,EA7CE,IA6CSlB,EAAgBkB","sources":["src/js/03-promises.js"],"sourcesContent":["const formEl = document.querySelector('.form');\nconst dataForm = {\n  delay: (delay = 2000),\n  step: (step = 1000),\n  amount: (amount = 3),\n};\nconst resultPromis = [];\n\nfunction createPromise(position, delay) {\n  setTimeout(() => {\n    const shouldResolve = Math.random() > 0.3;\n    console.log(shouldResolve);\n    console.log(position);\n\n    const promise = new Promise((resolve, reject) => {\n      if (shouldResolve) {\n        //resolve(`✅ Fulfilled promise ${position} in ${delay}ms`); // Fulfill\n\n        //resolve(position)(delay);\n        resolve(delay, position);\n      } else {\n        //reject(`❌ Rejected promise ${position} in ${delay}ms`); // Reject\n        // resolve(position);\n        resolve(delay, position);\n      }\n    });\n    promise.then(\n      result => {\n        console.log(result);\n        resultPromis[position - 1].position = result;\n        resultPromis[position - 1].delay = result;\n        // alert(`✅ \"${result}\"`);\n        console.log(resultPromis);\n      },\n      error => {\n        console.log(error);\n        // alert(`❌ \"${error}\"`);\n        resultPromis[position - 1].position = error;\n        resultPromis[position - 1].delay = error;\n        console.log(resultPromis);\n      }\n    );\n  }, delay);\n}\n\nfor (let i = 1; i < dataForm.amount + 1; i += 1) {\n  resultPromis.push({});\n  createPromise(i, delay + dataForm.step * i);\n}\n\n//const timerId = setInterval(callback, delay, arg1, arg2, ...);\n//-----------------------------------------------------------------------------\n//const isSuccess = true;\n\n//const promise = new Promise((resolve, reject) => {\n//  setTimeout(() => {\n//    if (isSuccess) {\n//      resolve('Success! Value passed to resolve function');\n//    } else {\n//      reject('Error! Error passed to reject function');\n//    }\n//  }, 2000);\n//});\n"],"names":["document","querySelector","delay","$47d4ff9957288465$var$dataForm","step","amount","$47d4ff9957288465$var$resultPromis","$47d4ff9957288465$var$createPromise","position","setTimeout","shouldResolve","Math","random","console","log","Promise","resolve","reject","then","result","error","i","push"],"version":3,"file":"03-promises.d6cdda03.js.map"}